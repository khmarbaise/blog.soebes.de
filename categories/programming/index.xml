<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on A coders, hackers heaven.....Hm...I do not think so...</title>
    <link>http://localhost:1313/categories/programming/</link>
    <description>Recent content in Programming on A coders, hackers heaven.....Hm...I do not think so...</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Aug 2018 19:09:56 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot Starter Parent Usage in Maven</title>
      <link>http://localhost:1313/blog/2018/08/2018-08-21-spring-boot-starter-parent-in-maven/</link>
      <pubDate>Tue, 21 Aug 2018 19:09:56 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2018/08/2018-08-21-spring-boot-starter-parent-in-maven/</guid>
      <description>I quite often see Spring Boot projects which are using the spring-boot-starter-parent as the following:
&amp;lt;project xmlns=&amp;#34;https://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.4.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;/properties&amp;gt; ... &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;/project&amp;gt; So far so good. Notices something? I have to mention that you can do it a little bit shorter like this:
&amp;lt;project xmlns=&amp;#34;https://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Automate it - Be Lazy - Part II</title>
      <link>http://localhost:1313/blog/2018/07/2018-07-30-automate-it-part-ii/</link>
      <pubDate>Mon, 30 Jul 2018 20:02:11 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2018/07/2018-07-30-automate-it-part-ii/</guid>
      <description>As I wrote in my Automate it - Be Lazy Part I - I would like to continue my post. So here it is.
The following parts are left from my process:
The process  Create an issue for myself (if already existing move to step 2) Create a branch within the appropriate project based on the issue Assign the issue to myself Migrate the issue into the state of IN PROGRESS Done.</description>
    </item>
    
    <item>
      <title>Automate it - Be Lazy - Part I</title>
      <link>http://localhost:1313/blog/2018/07/2018-07-21-automate-it-part-i/</link>
      <pubDate>Sat, 21 Jul 2018 10:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2018/07/2018-07-21-automate-it-part-i/</guid>
      <description>So based on my passion as open source developer in particular for the Apache Maven Project. I work JIRA based which helps us and myself to organize our work and of course follow the reported issues, feature request etc.
So usually I start my work based on a particular issue in JIRA and go via the following process:
The process  Create an issue for myself (if already existing move to step 2) Create a branch within the appropriate project based on the issue Assign the issue to myself Migrate the issue into the state of IN PROGRESS Do some work on the branch and commit Push the branch to remote and let Jenkins check the branch repeat with Step 5 until I finished my work.</description>
    </item>
    
    <item>
      <title>The Jenkins API Client for Java Version 0.3.7 Released</title>
      <link>http://localhost:1313/blog/2016/12/2016-12-20-the-jenkins-api-client-for-java-version-0-dot-3-7-released/</link>
      <pubDate>Tue, 20 Dec 2016 20:15:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2016/12/2016-12-20-the-jenkins-api-client-for-java-version-0-dot-3-7-released/</guid>
      <description>We have released a new version of the The Jenkins API client for Java. The new released 0.3.7 contains several bugfixes and new features. Detailed information about the changes can be found in the release notes.
This is the second release under the Jenkins Github Organization umbrella.
 Build class offers now two different methods to get the test informations. Using either getTestResult() for non maven type jobs or getTestReport() for maven type jobs.</description>
    </item>
    
    <item>
      <title>The Jenkins API Client for Java Version 0.3.6 Released</title>
      <link>http://localhost:1313/blog/2016/08/2016-08-31-the-jenkins-api-client-for-java-version-0-dot-3-6-released/</link>
      <pubDate>Wed, 31 Aug 2016 21:24:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2016/08/2016-08-31-the-jenkins-api-client-for-java-version-0-dot-3-6-released/</guid>
      <description>We have released a new version of the The Jenkins API client for Java. The new released 0.3.6 contains several bugfixes and new features. Detailed information about the changes can be found in the release notes.
This is the first release under the Jenkins Github Organization umbrella.
 The TestReport can now be used from the general Build as well as from MavenBuild Changed getComputerSet().getComputer() into getComputerSet().getComputers() cause it returned a list and more than one element.</description>
    </item>
    
    <item>
      <title>The Jenkins API Client for Java Version 0.3.5 Released</title>
      <link>http://localhost:1313/blog/2016/05/2016-05-14-the-jenkins-api-client-for-java-version-0-dot-3-5-released/</link>
      <pubDate>Sat, 14 May 2016 22:21:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2016/05/2016-05-14-the-jenkins-api-client-for-java-version-0-dot-3-5-released/</guid>
      <description>We have released a new version of the The Jenkins API client for Java. The new released 0.3.5 contains several bugfixes and new features. Detailed information about the changes can be found in the release notes.
 There had been several issues related to NPE. for example getUpstreamProjects(), getDownstreamProjects() which return null in case there is no such dependency. This has been fixed to return an empty list.
 Also fixed possible NPE in relation ship with getLastBuild() etc.</description>
    </item>
    
    <item>
      <title>The Jenkins API Client for Java Version 0.3.4 Released</title>
      <link>http://localhost:1313/blog/2016/05/2016-05-04-the-jenkins-api-client-for-java-version-0-dot-3-4-released/</link>
      <pubDate>Wed, 04 May 2016 15:30:21 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2016/05/2016-05-04-the-jenkins-api-client-for-java-version-0-dot-3-4-released/</guid>
      <description>We have released a new version of the The Jenkins API client for Java. The new released 0.3.4 contains several bugfixes and new features. Detailed information about the changes can be found in the release notes.
 There has been several issues related to HttpResponseException which occured this has been fixed in the current release.
 You can now get the whole information about the installed plugins on a Jenkins Server if you have the appropriate permissions, cause the access to the pluginManager is defined an administrative permisions.</description>
    </item>
    
    <item>
      <title>The Jenkins API Client for Java Version 0.3.3 Released</title>
      <link>http://localhost:1313/blog/2015/12/2015-12-23-the-jenkins-api-client-for-java-version-0-dot-3-3-released/</link>
      <pubDate>Wed, 23 Dec 2015 13:50:21 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2015/12/2015-12-23-the-jenkins-api-client-for-java-version-0-dot-3-3-released/</guid>
      <description>We have released a new version of the The Jenkins API client for Java. The new released 0.3.3 contains a few bugfixes. Detailed information about the changes can be found in the release notes.
The Jenkins API client for Java allows you to get informations about builds for example the duration of a build or test report informations.</description>
    </item>
    
    <item>
      <title>The Jenkins API Client for Java Version 0.3.2 Released</title>
      <link>http://localhost:1313/blog/2015/10/2015-10-18-the-jenkins-api-client-for-java-version-0-dot-3-2-released/</link>
      <pubDate>Sun, 18 Oct 2015 19:31:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2015/10/2015-10-18-the-jenkins-api-client-for-java-version-0-dot-3-2-released/</guid>
      <description>We have released a new version of the The Jenkins API client for Java. The new released 0.3.2 contains several improvements and a few bugfixes. Detailed information about the changes can be found in the release notes.
The Jenkins API client for Java allows you to get informations about builds for example the duration of a build or test report informations.</description>
    </item>
    
    <item>
      <title>The Jenkins API Client for Java Version 0.3.1 Released</title>
      <link>http://localhost:1313/blog/2015/08/2015-08-31-the-jenkins-api-client-for-java-version-0-dot-3-1-released/</link>
      <pubDate>Mon, 31 Aug 2015 19:07:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2015/08/2015-08-31-the-jenkins-api-client-for-java-version-0-dot-3-1-released/</guid>
      <description>We have released a new version of the The Jenkins API client for Java. The new released 0.3.1 contains several improvements and a few bugfixes. Detailed information about the changes can be found in the release notes.
The Jenkins API client for Java allows you to get informations about builds for example the duration of a build or test report informations.</description>
    </item>
    
    <item>
      <title>FluentAPI - Usage</title>
      <link>http://localhost:1313/blog/2014/01/2014-01-01-fluentapi-usage/</link>
      <pubDate>Wed, 01 Jan 2014 01:23:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/01/2014-01-01-fluentapi-usage/</guid>
      <description>As a Java developer I always got the impression that my own code can be made better (unfortunately I am not perfect). That brought me to think about how I could improve the code.
So I thought several times about my code and while looking for example into my unit/integrations tests I found the following code snippet:
AccessRules rules = new AccessRules(); AccessRule rule1 = new AccessRule(&amp;#34;/&amp;#34;); rule1.add(UserFactory.createInstance(&amp;#34;*&amp;#34;), AccessLevel.READ); rule1.add(UserFactory.createInstance(&amp;#34;harry&amp;#34;), AccessLevel.</description>
    </item>
    
  </channel>
</rss>