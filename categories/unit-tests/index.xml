<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Tests on A coders, hackers heaven.....Hm...I do not think so...</title>
    <link>http://localhost:1313/categories/unit-tests/</link>
    <description>Recent content in Unit Tests on A coders, hackers heaven.....Hm...I do not think so...</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 19 Apr 2012 10:22:55 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/unit-tests/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TDD and Code Coverage</title>
      <link>http://localhost:1313/blog/2012/2012-04-19-tdd-and-code-coverage/</link>
      <pubDate>Thu, 19 Apr 2012 10:22:55 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012/2012-04-19-tdd-and-code-coverage/</guid>
      <description>I have found an interessting article of Martin Fowler about Code Coverage and testing.</description>
    </item>
    
    <item>
      <title>Maven Unit and Integration Test Guide (MaUI Guide) started.</title>
      <link>http://localhost:1313/blog/2011/2011-04-24-maven-unit-and-integration-test-guide-maui-guide-started/</link>
      <pubDate>Sun, 24 Apr 2011 12:26:17 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2011/2011-04-24-maven-unit-and-integration-test-guide-maui-guide-started/</guid>
      <description>Based on often written requirements (mailing list, stackoverflow.com etc.) and an Jira entry i have decided to start a guide about unit- and integration tests. This guide is called Maven Unit- and Integration Test Guide (MaUI Guide for short) and the current state of development can be found on https://khmarbaise.github.com/maui/. The currently generated guide can be used as reference where you can read how to do unit- and/or integration testing. Of course if you find things unclear or would like to see supplemental things in there just file in a issue in the issue tracker of the github project.</description>
    </item>
    
    <item>
      <title>Vereinfachung von Unit Tests mithilfe von TestNG </title>
      <link>http://localhost:1313/blog/2008/2008-07-13-vereinfachung-von-unit-tests-mithilfe-von-testng-/</link>
      <pubDate>Sun, 13 Jul 2008 10:23:34 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2008/2008-07-13-vereinfachung-von-unit-tests-mithilfe-von-testng-/</guid>
      <description>Die Anwendung von JUnit ist in der Java Welt ja eigentlich schon kalter Kaffee, aber in manchen Situation stößt man doch an Grenzen von JUnit (sowohl 3.8 alsauch 4.X). Nämlich dann wenn man einen Test hat, der mit unterschiedlichen Daten durchlaufen soll. Genau da zeigt dann TestNG seine stärke mithilfe s.g. DataProvider.</description>
    </item>
    
    <item>
      <title>Hibernate Annotations: Eigene Sequenzen pro Klasse bei Vererbung</title>
      <link>http://localhost:1313/blog/2008/2008-07-11-hibernate-annotations-eigene-sequenzen-pro-klasse-bei-vererbung/</link>
      <pubDate>Fri, 11 Jul 2008 20:35:15 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2008/2008-07-11-hibernate-annotations-eigene-sequenzen-pro-klasse-bei-vererbung/</guid>
      <description>Bei der Arbeit mit Hibernate tritt häufiger das Problem auf, dass man bei vererbten Klassen pro Tabelle eine eigene Sequence (z.B. in Oracle) verwenden möchte bzw. muß. Man kann selbstverständlich die Id in jede Klasse packen und dort dann die entsprechenden Annotierungen anbringen. Das ist aber schlicht und ergreifend lässtig und wiederspricht dem OO Prinzip. Wenn man nun konsequent mit Vererbung arbeitet, ergibt es sich, dass meist eine Basis-Klasse entsteht und dort das Id Attribut enthalten ist.</description>
    </item>
    
  </channel>
</rss>